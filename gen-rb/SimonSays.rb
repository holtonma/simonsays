#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift/protocol'
require File.dirname(__FILE__) + '/simonsays_types'

module SimonSays
  class Client
    include ::Thrift::Client

    def registerClient(email)
      send_registerClient(email)
      return recv_registerClient()
    end

    def send_registerClient(email)
      send_message('registerClient', RegisterClient_args, :email => email)
    end

    def recv_registerClient()
      result = receive_message(RegisterClient_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'registerClient failed: unknown result')
    end

    def startTurn()
      send_startTurn()
      return recv_startTurn()
    end

    def send_startTurn()
      send_message('startTurn', StartTurn_args)
    end

    def recv_startTurn()
      result = receive_message(StartTurn_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'startTurn failed: unknown result')
    end

    def chooseColor(colorChosen)
      send_chooseColor(colorChosen)
      return recv_chooseColor()
    end

    def send_chooseColor(colorChosen)
      send_message('chooseColor', ChooseColor_args, :colorChosen => colorChosen)
    end

    def recv_chooseColor()
      result = receive_message(ChooseColor_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'chooseColor failed: unknown result')
    end

    def endTurn()
      send_endTurn()
      return recv_endTurn()
    end

    def send_endTurn()
      send_message('endTurn', EndTurn_args)
    end

    def recv_endTurn()
      result = receive_message(EndTurn_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'endTurn failed: unknown result')
    end

    def winGame()
      send_winGame()
      return recv_winGame()
    end

    def send_winGame()
      send_message('winGame', WinGame_args)
    end

    def recv_winGame()
      result = receive_message(WinGame_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'winGame failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_registerClient(seqid, iprot, oprot)
      args = read_args(iprot, RegisterClient_args)
      result = RegisterClient_result.new()
      result.success = @handler.registerClient(args.email)
      write_result(result, oprot, 'registerClient', seqid)
    end

    def process_startTurn(seqid, iprot, oprot)
      args = read_args(iprot, StartTurn_args)
      result = StartTurn_result.new()
      result.success = @handler.startTurn()
      write_result(result, oprot, 'startTurn', seqid)
    end

    def process_chooseColor(seqid, iprot, oprot)
      args = read_args(iprot, ChooseColor_args)
      result = ChooseColor_result.new()
      result.success = @handler.chooseColor(args.colorChosen)
      write_result(result, oprot, 'chooseColor', seqid)
    end

    def process_endTurn(seqid, iprot, oprot)
      args = read_args(iprot, EndTurn_args)
      result = EndTurn_result.new()
      result.success = @handler.endTurn()
      write_result(result, oprot, 'endTurn', seqid)
    end

    def process_winGame(seqid, iprot, oprot)
      args = read_args(iprot, WinGame_args)
      result = WinGame_result.new()
      result.success = @handler.winGame()
      write_result(result, oprot, 'winGame', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class RegisterClient_args
    include ::Thrift::Struct
    EMAIL = 1

    Thrift::Struct.field_accessor self, :email
    FIELDS = {
      EMAIL => {:type => Thrift::Types::STRING, :name => 'email'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class RegisterClient_result
    include ::Thrift::Struct
    SUCCESS = 0

    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      SUCCESS => {:type => Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class StartTurn_args
    include ::Thrift::Struct

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class StartTurn_result
    include ::Thrift::Struct
    SUCCESS = 0

    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      SUCCESS => {:type => Thrift::Types::LIST, :name => 'success', :element => {:type => Thrift::Types::I32, :enum_class => Color}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class ChooseColor_args
    include ::Thrift::Struct
    COLORCHOSEN = 1

    Thrift::Struct.field_accessor self, :colorChosen
    FIELDS = {
      COLORCHOSEN => {:type => Thrift::Types::I32, :name => 'colorChosen', :enum_class => Color}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @colorChosen.nil? || Color::VALID_VALUES.include?(@colorChosen)
        raise Thrift::ProtocolException.new(Thrift::ProtocolException::UNKNOWN, 'Invalid value of field colorChosen!')
      end
    end

  end

  class ChooseColor_result
    include ::Thrift::Struct
    SUCCESS = 0

    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      SUCCESS => {:type => Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class EndTurn_args
    include ::Thrift::Struct

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class EndTurn_result
    include ::Thrift::Struct
    SUCCESS = 0

    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      SUCCESS => {:type => Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class WinGame_args
    include ::Thrift::Struct

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class WinGame_result
    include ::Thrift::Struct
    SUCCESS = 0

    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      SUCCESS => {:type => Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

end

